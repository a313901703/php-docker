version: '3.5'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/24
  backend:
    driver: ${NETWORKS_DRIVER}
    ipam:
      driver: default
      config:
        - subnet: 172.31.0.0/24

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  neo4j:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  docker-in-docker:
    driver: ${VOLUMES_DRIVER}

services:

### Workspace Utilities ##################################
    workspace:
      build:
        context: ./workspace
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - UBUNTU_SOURCE=${UBUNTU_SOURCE}
          - BASE_IMAGE_TAG_PREFIX=${WORKSPACE_BASE_IMAGE_TAG_PREFIX}
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - INSTALL_SUBVERSION=${WORKSPACE_INSTALL_SUBVERSION}
          - INSTALL_GNUPG=${WORKSPACE_INSTALL_GNUPG}
          - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
          - INSTALL_PCOV=${WORKSPACE_INSTALL_PCOV}
          - INSTALL_PHPDBG=${WORKSPACE_INSTALL_PHPDBG}
          - INSTALL_SSH2=${WORKSPACE_INSTALL_SSH2}
          - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
          - INSTALL_XSL=${WORKSPACE_INSTALL_XSL}
          - INSTALL_LDAP=${WORKSPACE_INSTALL_LDAP}
          - INSTALL_SMB=${WORKSPACE_INSTALL_SMB}
          - INSTALL_IMAP=${WORKSPACE_INSTALL_IMAP}
          - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
          - INSTALL_AMQP=${WORKSPACE_INSTALL_AMQP}
          - INSTALL_CASSANDRA=${WORKSPACE_INSTALL_CASSANDRA}
          - INSTALL_GEARMAN=${WORKSPACE_INSTALL_GEARMAN}
          - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
          - INSTALL_MSSQL=${WORKSPACE_INSTALL_MSSQL}
          - NVM_NODEJS_ORG_MIRROR=${WORKSPACE_NVM_NODEJS_ORG_MIRROR}
          - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
          - NPM_REGISTRY=${WORKSPACE_NPM_REGISTRY}
          - NPM_FETCH_RETRIES=${WORKSPACE_NPM_FETCH_RETRIES}
          - NPM_FETCH_RETRY_FACTOR=${WORKSPACE_NPM_FETCH_RETRY_FACTOR}
          - NPM_FETCH_RETRY_MINTIMEOUT=${WORKSPACE_NPM_FETCH_RETRY_MINTIMEOUT}
          - NPM_FETCH_RETRY_MAXTIMEOUT=${WORKSPACE_NPM_FETCH_RETRY_MAXTIMEOUT}
          - INSTALL_PNPM=${WORKSPACE_INSTALL_PNPM}
          - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
          - INSTALL_NPM_GULP=${WORKSPACE_INSTALL_NPM_GULP}
          - INSTALL_NPM_BOWER=${WORKSPACE_INSTALL_NPM_BOWER}
          - INSTALL_NPM_VUE_CLI=${WORKSPACE_INSTALL_NPM_VUE_CLI}
          - INSTALL_DRUSH=${WORKSPACE_INSTALL_DRUSH}
          - INSTALL_WP_CLI=${WORKSPACE_INSTALL_WP_CLI}
          - INSTALL_DRUPAL_CONSOLE=${WORKSPACE_INSTALL_DRUPAL_CONSOLE}
          - INSTALL_AEROSPIKE=${WORKSPACE_INSTALL_AEROSPIKE}
          - INSTALL_OCI8=${WORKSPACE_INSTALL_OCI8}
          - INSTALL_V8JS=${WORKSPACE_INSTALL_V8JS}
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - COMPOSER_VERSION=${WORKSPACE_COMPOSER_VERSION}
          - COMPOSER_AUTH=${WORKSPACE_COMPOSER_AUTH}
          - COMPOSER_REPO_PACKAGIST=${WORKSPACE_COMPOSER_REPO_PACKAGIST}
          - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
          - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
          - INSTALL_PRESTISSIMO=${WORKSPACE_INSTALL_PRESTISSIMO}
          - INSTALL_MC=${WORKSPACE_INSTALL_MC}
          - INSTALL_PYTHON=${WORKSPACE_INSTALL_PYTHON}
          - INSTALL_PYTHON3=${WORKSPACE_INSTALL_PYTHON3}
          - INSTALL_IMAGE_OPTIMIZERS=${WORKSPACE_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
          - INSTALL_DUSK_DEPS=${WORKSPACE_INSTALL_DUSK_DEPS}
          - INSTALL_SWOOLE=${WORKSPACE_INSTALL_SWOOLE}
          - INSTALL_TAINT=${WORKSPACE_INSTALL_TAINT}
          - INSTALL_LIBPNG=${WORKSPACE_INSTALL_LIBPNG}
          - INSTALL_GRAPHVIZ=${WORKSPACE_INSTALL_GRAPHVIZ}
          - INSTALL_IONCUBE=${WORKSPACE_INSTALL_IONCUBE}
          - INSTALL_MYSQL_CLIENT=${WORKSPACE_INSTALL_MYSQL_CLIENT}
          - INSTALL_PING=${WORKSPACE_INSTALL_PING}
          - INSTALL_SSHPASS=${WORKSPACE_INSTALL_SSHPASS}
          - INSTALL_INOTIFY=${WORKSPACE_INSTALL_INOTIFY}
          - INSTALL_FSWATCH=${WORKSPACE_INSTALL_FSWATCH}
          - INSTALL_AST=${WORKSPACE_INSTALL_AST}
          - INSTALL_YAML=${WORKSPACE_INSTALL_YAML}
          - INSTALL_RDKAFKA=${WORKSPACE_INSTALL_RDKAFKA}
          - INSTALL_GIT_PROMPT=${WORKSPACE_INSTALL_GIT_PROMPT}
          - INSTALL_XMLRPC=${WORKSPACE_INSTALL_XMLRPC}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - CHROME_DRIVER_VERSION=${WORKSPACE_CHROME_DRIVER_VERSION}
          - NODE_VERSION=${WORKSPACE_NODE_VERSION}
          - YARN_VERSION=${WORKSPACE_YARN_VERSION}
          - DRUSH_VERSION=${WORKSPACE_DRUSH_VERSION}
          - AST_VERSION=${WORKSPACE_AST_VERSION}
          - IMAGEMAGICK_VERSION=${WORKSPACE_IMAGEMAGICK_VERSION}
          - TZ=${WORKSPACE_TIMEZONE}
          - INSTALL_POWERLINE=${WORKSPACE_INSTALL_POWERLINE}
          - INSTALL_SUPERVISOR=${WORKSPACE_INSTALL_SUPERVISOR}
          - INSTALL_FFMPEG=${WORKSPACE_INSTALL_FFMPEG}
          - INSTALL_WKHTMLTOPDF=${WORKSPACE_INSTALL_WKHTMLTOPDF}
          - INSTALL_LNAV=${WORKSPACE_INSTALL_LNAV}
          - INSTALL_PHPDECIMAL=${WORKSPACE_INSTALL_PHPDECIMAL}
          - INSTALL_ZOOKEEPER=${WORKSPACE_INSTALL_ZOOKEEPER}
          - INSTALL_DOCKER_CLIENT=${WORKSPACE_INSTALL_DOCKER_CLIENT}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - docker-in-docker:/certs/client
        - ./workspace/supervisord.d:/etc/supervisord.d
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
        - "${WORKSPACE_BROWSERSYNC_HOST_PORT}:3000"
        - "${WORKSPACE_BROWSERSYNC_UI_HOST_PORT}:3001"
        - "${WORKSPACE_VUE_CLI_SERVE_HOST_PORT}:8080"
        - "${WORKSPACE_VUE_CLI_UI_HOST_PORT}:8000"
        - "${WORKSPACE_ANGULAR_CLI_SERVE_HOST_PORT}:4200"
      tty: true
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - DOCKER_HOST=tcp://docker-in-docker:2376
        - DOCKER_TLS_VERIFY=1
        - DOCKER_TLS_CERTDIR=/certs
        - DOCKER_CERT_PATH=/certs/client
      networks:
        - frontend
        - backend
      links:
        - docker-in-docker

### PHP-FPM ##############################################
    php-fpm:
      build:
        context: ./php-fpm
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - BASE_IMAGE_TAG_PREFIX=${PHP_FPM_BASE_IMAGE_TAG_PREFIX}
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - INSTALL_BZ2=${PHP_FPM_INSTALL_BZ2}
          - INSTALL_ENCHANT=${PHP_FPM_INSTALL_ENCHANT}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_GNUPG=${PHP_FPM_INSTALL_GNUPG}
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_PCOV=${PHP_FPM_INSTALL_PCOV}
          - INSTALL_PHPDBG=${PHP_FPM_INSTALL_PHPDBG}
          - INSTALL_SSH2=${PHP_FPM_INSTALL_SSH2}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_XSL=${PHP_FPM_INSTALL_XSL}
          - INSTALL_SMB=${PHP_FPM_INSTALL_SMB}
          - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_CASSANDRA=${PHP_FPM_INSTALL_CASSANDRA}
          - INSTALL_GEARMAN=${PHP_FPM_INSTALL_GEARMAN}
          - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_AEROSPIKE=${PHP_FPM_INSTALL_AEROSPIKE}
          - INSTALL_OCI8=${PHP_FPM_INSTALL_OCI8}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_POSTGIS=${PHP_FPM_INSTALL_POSTGIS}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_TAINT=${PHP_FPM_INSTALL_TAINT}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_CALENDAR=${PHP_FPM_INSTALL_CALENDAR}
          - INSTALL_FAKETIME=${PHP_FPM_INSTALL_FAKETIME}
          - INSTALL_IONCUBE=${PHP_FPM_INSTALL_IONCUBE}
          - INSTALL_APCU=${PHP_FPM_INSTALL_APCU}
          - INSTALL_CACHETOOL=${PHP_FPM_INSTALL_CACHETOOL}
          - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
          - INSTALL_RDKAFKA=${PHP_FPM_INSTALL_RDKAFKA}
          - INSTALL_GETTEXT=${PHP_FPM_INSTALL_GETTEXT}
          - INSTALL_ADDITIONAL_LOCALES=${PHP_FPM_INSTALL_ADDITIONAL_LOCALES}
          - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
          - INSTALL_PING=${PHP_FPM_INSTALL_PING}
          - INSTALL_SSHPASS=${PHP_FPM_INSTALL_SSHPASS}
          - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
          - ADDITIONAL_LOCALES=${PHP_FPM_ADDITIONAL_LOCALES}
          - INSTALL_FFMPEG=${PHP_FPM_FFMPEG}
          - INSTALL_AUDIOWAVEFORM=${PHP_FPM_AUDIOWAVEFORM}
          - INSTALL_WKHTMLTOPDF=${PHP_FPM_INSTALL_WKHTMLTOPDF}
          - INSTALL_XHPROF=${PHP_FPM_INSTALL_XHPROF}
          - INSTALL_XMLRPC=${PHP_FPM_INSTALL_XMLRPC}
          - INSTALL_PHPDECIMAL=${PHP_FPM_INSTALL_PHPDECIMAL}
          - INSTALL_ZOOKEEPER=${PHP_FPM_INSTALL_ZOOKEEPER}
          - DOWNGRADE_OPENSSL_TLS_AND_SECLEVEL=${PHP_DOWNGRADE_OPENSSL_TLS_AND_SECLEVEL}
          - PUID=${PHP_FPM_PUID}
          - PGID=${PHP_FPM_PGID}
          - IMAGEMAGICK_VERSION=${PHP_FPM_IMAGEMAGICK_VERSION}
          - LOCALE=${PHP_FPM_DEFAULT_LOCALE}
          - INSTALL_DOCKER_CLIENT=${PHP_FPM_INSTALL_DOCKER_CLIENT}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - docker-in-docker:/certs/client
      ports:
        - "${PHP_FPM_XDEBUG_PORT}:9003"
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
        - "unv.retail.com:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - DOCKER_HOST=tcp://docker-in-docker:2376
        - DOCKER_TLS_VERIFY=1
        - DOCKER_TLS_CERTDIR=/certs
        - DOCKER_CERT_PATH=/certs/client
        - FAKETIME=${PHP_FPM_FAKETIME}
      depends_on:
        - workspace
      networks:
        - backend
      links:
        - docker-in-docker

### NGINX Server #########################################
    nginx:
      build:
        context: ./nginx
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### MySQL ################################################
    mysql:
      build:
        context: ./mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### Neo4j ################################################
    # neo4j:
    #   ports:
    #       - '7401:7474'
    #       - '7402:7687'
    #   environment:
    #       - NEO4J_AUTH=none
    #   volumes:
    #       - ${DATA_PATH_HOST}/neo4j/data:/data
    #       - ${DATA_PATH_HOST}/neo4j/logs:/logs
    #   image: 'neo4j:latest'
    #   networks:
    #     - backend


### MongoDB ##############################################
    # mongo:
    #   build: ./mongo
    #   ports:
    #     - "${MONGODB_PORT}:27017"
    #   volumes:
    #     - ${DATA_PATH_HOST}/mongo:/data/db
    #     - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    #   networks:
    #     - backend

### Redis ################################################
    redis:
      build: ./redis
      volumes:
        - ${DATA_PATH_HOST}/redis:/data
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend

### Redis Cluster ##########################################
    # redis-cluster:
    #   build: ./redis-cluster
    #   ports:
    #     - "${REDIS_CLUSTER_PORT_RANGE}:7000-7005"
    #   networks:
    #     - backend


### RabbitMQ #############################################
    # rabbitmq:
    #   build: ./rabbitmq
    #   ports:
    #     - "${RABBITMQ_NODE_HOST_PORT}:5672"
    #     - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
    #     - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
    #   privileged: true
    #   environment:
    #     - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
    #     - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    #   hostname: laradock-rabbitmq
    #   volumes:
    #     - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
    #   depends_on:
    #     - php-fpm
    #   networks:
    #     - backend

### ElasticSearch ########################################
    elasticsearch:
      build:
        context: ./elasticsearch
        args:
          - ELK_VERSION=${ELK_VERSION}
      volumes:
        - './elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml'
        - elasticsearch:/usr/share/elasticsearch/data
      environment:
        - cluster.name=laradock-cluster
        - node.name=laradock-node
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        - cluster.initial_master_nodes=laradock-node
      ulimits:
        memlock:
          soft: -1
          hard: -1
        nofile:
          soft: 65536
          hard: 65536
      ports:
        - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
        - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### Logstash ##############################################
    logstash:
      build:
        context: ./logstash
        args:
          - ELK_VERSION=${ELK_VERSION}
      volumes:
        - './logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml'
        - './logstash/pipeline:/usr/share/logstash/pipeline'
      ports:
        - '5001:5001'
      environment:
        LS_JAVA_OPTS: '-Xmx1g -Xms1g'
      env_file:
        - .env
      networks:
        - frontend
        - backend
      depends_on:
        - elasticsearch

### Kibana ##############################################
    kibana:
      build:
        context: ./kibana
        args:
          - ELK_VERSION=${ELK_VERSION}
      volumes:
        - './kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml'
      ports:
        - "${KIBANA_HTTP_PORT}:5601"
      depends_on:
        - elasticsearch
      networks:
        - frontend
        - backend

### filebeat ##############################################
    filebeat:
      build:
        context: ./filebeat
        args:
          - ELK_VERSION=${ELK_VERSION}
      volumes:
        - './filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml'
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      depends_on:
        - elasticsearch
      networks:
        - frontend
        - backend

### Jenkins ###################################################
    # jenkins:
    #   build: ./jenkins
    #   environment:
    #     JAVA_OPTS: "-Djava.awt.headless=true"
    #   ports:
    #     - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
    #     - "${JENKINS_HOST_HTTP_PORT}:8080"
    #   privileged: true
    #   volumes:
    #     - ${JENKINS_HOME}:/var/jenkins_home
    #     - /var/run/docker.sock:/var/run/docker.sock
    #   networks:
    #     - frontend
    #     - backend

### Gitlab ################################################
    # gitlab:
    #   build:
    #     context: ./gitlab
    #   environment:
    #     GITLAB_OMNIBUS_CONFIG: |
    #       external_url '${GITLAB_DOMAIN_NAME}'
    #       redis['enable'] = false
    #       nginx['listen_https'] = false
    #       nginx['listen_port'] = 80
    #       nginx['custom_gitlab_server_config'] = "set_real_ip_from 172.0.0.0/8;\nreal_ip_header X-Real-IP;\nreal_ip_recursive on;"
    #       postgresql['enable'] = false
    #       gitlab_rails['trusted_proxies'] = ['caddy','nginx','apache2']
    #       gitlab_rails['redis_host'] = 'redis'
    #       gitlab_rails['redis_database'] = 8
    #       gitlab_rails['db_host'] = '${GITLAB_POSTGRES_HOST}'
    #       gitlab_rails['db_username'] = '${GITLAB_POSTGRES_USER}'
    #       gitlab_rails['db_password'] = '${GITLAB_POSTGRES_PASSWORD}'
    #       gitlab_rails['db_database'] = '${GITLAB_POSTGRES_DB}'
    #       gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
    #       gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_HOST_SSH_PORT}
    #   volumes:
    #     - ${DATA_PATH_HOST}/gitlab/config:/etc/gitlab
    #     - ${DATA_PATH_HOST}/gitlab/data:/var/opt/gitlab
    #     - ${GITLAB_HOST_LOG_PATH}:/var/log/gitlab
    #   ports:
    #     - "${GITLAB_HOST_HTTP_PORT}:80"
    #     - "${GITLAB_HOST_HTTPS_PORT}:443"
    #     - "${GITLAB_HOST_SSH_PORT}:22"
    #   networks:
    #     - backend
    #   depends_on:
    #     - redis
    #     - postgres
    # gitlab-runner:
    #   image: gitlab/gitlab-runner:latest
    #   environment:
    #     - CI_SERVER_URL=${GITLAB_CI_SERVER_URL}
    #     - REGISTRATION_TOKEN=${GITLAB_RUNNER_REGISTRATION_TOKEN}
    #     - RUNNER_NAME=${COMPOSE_PROJECT_NAME}-runner
    #     - REGISTER_NON_INTERACTIVE=${GITLAB_REGISTER_NON_INTERACTIVE}
    #     - RUNNER_EXECUTOR=shell
    #   volumes:
    #     - ${DATA_PATH_HOST}/gitlab/runner:/etc/gitlab-runner
    #     - /var/run/docker.sock:/var/run/docker.sock:rw
    #   restart: always

### Docker-in-Docker ################################################
    docker-in-docker:
      image: docker:19.03-dind
      environment:
        DOCKER_TLS_SAN: DNS:docker-in-docker
      privileged: true
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - docker-in-docker:/certs/client
      expose:
        - 2375
      networks:
        - backend

### NetData ################################################
    # netdata:
    #   image: netdata/netdata:latest
    #   cap_add:
    #     - SYS_PTRACE
    #   volumes:
    #     - /proc:/host/proc:ro
    #     - /sys:/host/sys:ro
    #     - /var/run/docker.sock:/var/run/docker.sock:ro
    #   ports:
    #     - "${NETDATA_PORT}:19999"
    #   networks:
    #     - backend

### REDISWEBUI ################################################
    redis-webui:
      build:
        context: ./redis-webui
      environment:
        - ADMIN_USER=${REDIS_WEBUI_USERNAME}
        - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
        - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
        - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
        - REDIS_1_AUTH=${REDIS_WEBUI_REDIS_AUTH}
      networks:
        - backend
      ports:
        - "${REDIS_WEBUI_PORT}:80"
      depends_on:
        - redis

### MongoWebUI ################################################
    # mongo-webui:
    #   build:
    #     context: ./mongo-webui
    #   environment:
    #     - ROOT_URL=${MONGO_WEBUI_ROOT_URL}
    #     - MONGO_URL=${MONGO_WEBUI_MONGO_URL}
    #     - INSTALL_MONGO=${MONGO_WEBUI_INSTALL_MONGO}
    #   volumes:
    #     - ${DATA_PATH_HOST}/mongo-webui:/data/db
    #   ports:
    #     - "${MONGO_WEBUI_PORT}:3000"
    #   networks:
    #     - backend
    #   depends_on:
    #     - mongo


### DOCKER-REGISTRY ################################################
    # docker-registry:
    #   build:
    #     context: ./docker-registry
    #   volumes:
    #     - /etc/localtime:/etc/localtime:ro
    #     - ${DATA_PATH_HOST}/docker-registry:/var/lib/registry
    #   ports:
    #     - "${DOCKER_REGISTRY_PORT}:5000"
    #   networks:
    #     - backend

### DOCKER-WEB-UI ################################################
    docker-web-ui:
      build:
        context: ./docker-web-ui
      environment:
        - TZ=${WORKSPACE_TIMEZONE}
        - ENV_DOCKER_REGISTRY_HOST=${DOCKER_WEBUI_REGISTRY_HOST}
        - ENV_DOCKER_REGISTRY_PORT=${DOCKER_WEBUI_REGISTRY_PORT}
        - ENV_DOCKER_REGISTRY_USE_SSL=${DOCKER_REGISTRY_USE_SSL}
        - ENV_MODE_BROWSE_ONLY=${DOCKER_REGISTRY_BROWSE_ONLY}
      volumes:
        - /etc/localtime:/etc/localtime:ro
      ports:
        - "${DOCKER_WEBUI_PORT}:80"
      networks:
        - frontend
        - backend

### MAILU ################################################
    # mailu:
    #   image: mailu/admin:${MAILU_VERSION}
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/data:/data"
    #     - "${DATA_PATH_HOST}/mailu/dkim:/dkim"
    #     - "${DATA_PATH_HOST}/mailu/webmail:/webmail"
    #     - /var/run/docker.sock:/var/run/docker.sock:ro
    #   depends_on:
    #     - mailu-front
    #     - mailu-imap
    #     - mailu-smtp
    #     - mailu-antispam
    #     - mailu-antivirus
    #     - mailu-webdav
    #     - mailu-admin
    #     - mailu-webmail
    #     - mailu-fetchmail
    #   command: ["sh", "-c", "echo ${MAILU_INIT_ADMIN_USERNAME}@${MAILU_DOMAIN} ${MAILU_INIT_ADMIN_PASSWORD} ;python manage.py advertise ; python manage.py db upgrade ; python manage.py admin ${MAILU_INIT_ADMIN_USERNAME} ${MAILU_DOMAIN} ${MAILU_INIT_ADMIN_PASSWORD} || true;sed -i -- \"s/= Off/= On/g\" /webmail/_data_/_default_/configs/config.ini || true;if grep -Fq \"registration_link_url\" /webmail/_data_/_default_/configs/config.ini;then echo Already set!;else echo \"\" >> /webmail/_data_/_default_/configs/config.ini; echo \"[login]\" >> /webmail/_data_/_default_/configs/config.ini;echo \"registration_link_url = '${MAILU_WEBSITE}${MAILU_WEB_ADMIN}/ui/user/signup'\" >> /webmail/_data_/_default_/configs/config.ini;fi"]
    #   networks:
    #     - backend
    # mailu-front:
    #   image: mailu/nginx:${MAILU_VERSION}
    #   environment:
    #     - ADMIN=${MAILU_ADMIN}
    #     - WEB_ADMIN=${MAILU_WEB_ADMIN}
    #     - WEB_WEBMAIL=${MAILU_WEB_WEBMAIL}
    #     - WEBDAV=${MAILU_WEBDAV}
    #     - HOSTNAMES=${MAILU_HOSTNAMES}
    #     - TLS_FLAVOR=${MAILU_TLS_FLAVOR}
    #     - MESSAGE_SIZE_LIMIT=${MAILU_MESSAGE_SIZE_LIMIT}
    #   ports:
    #     - "${MAILU_HTTP_PORT}:80"
    #     - "${MAILU_HTTPS_PORT}:443"
    #     - "110:110"
    #     - "143:143"
    #     - "993:993"
    #     - "995:995"
    #     - "25:25"
    #     - "465:465"
    #     - "587:587"
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/certs:/certs"
    #   networks:
    #     backend:
    #       aliases:
    #         - front
    # mailu-imap:
    #   image: mailu/dovecot:${MAILU_VERSION}
    #   environment:
    #     - DOMAIN=${MAILU_DOMAIN}
    #     - HOSTNAMES=${MAILU_HOSTNAMES}
    #     - POSTMASTER=${MAILU_POSTMASTER}
    #     - WEBMAIL=${MAILU_WEBMAIL}
    #     - RECIPIENT_DELIMITER=${MAILU_RECIPIENT_DELIMITER}
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/data:/data"
    #     - "${DATA_PATH_HOST}/mailu/mail:/mail"
    #     - "${DATA_PATH_HOST}/mailu/overrides:/overrides"
    #   depends_on:
    #     - mailu-front
    #   networks:
    #     backend:
    #       aliases:
    #         - imap
    # mailu-smtp:
    #   image: mailu/postfix:${MAILU_VERSION}
    #   environment:
    #     - DOMAIN=${MAILU_DOMAIN}
    #     - HOSTNAMES=${MAILU_HOSTNAMES}
    #     - RELAYHOST=${MAILU_RELAYHOST}
    #     - RELAYNETS=${MAILU_RELAYNETS}
    #     - RECIPIENT_DELIMITER=${MAILU_RECIPIENT_DELIMITER}
    #     - MESSAGE_SIZE_LIMIT=${MAILU_MESSAGE_SIZE_LIMIT}
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/data:/data"
    #     - "${DATA_PATH_HOST}/mailu/overrides:/overrides"
    #   depends_on:
    #     - mailu-front
    #   networks:
    #     backend:
    #       aliases:
    #         - smtp
    # mailu-antispam:
    #   image: mailu/rspamd:${MAILU_VERSION}
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/filter:/var/lib/rspamd"
    #     - "${DATA_PATH_HOST}/mailu/dkim:/dkim"
    #     - "${DATA_PATH_HOST}/mailu/overrides/rspamd:/etc/rspamd/override.d"
    #   depends_on:
    #     - mailu-front
    #   networks:
    #     backend:
    #       aliases:
    #         - antispam
    # mailu-antivirus:
    #   image: mailu/clamav:${MAILU_VERSION}
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/filter:/data"
    #   networks:
    #     backend:
    #       aliases:
    #         - antivirus
    # mailu-webdav:
    #   image: mailu/${MAILU_WEBDAV}:${MAILU_VERSION}
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/dav:/data"
    #   networks:
    #     backend:
    #       aliases:
    #         - webdav
    # mailu-admin:
    #   image: mailu/admin:${MAILU_VERSION}
    #   environment:
    #     - DOMAIN=${MAILU_DOMAIN}
    #     - HOSTNAMES=${MAILU_HOSTNAMES}
    #     - POSTMASTER=${MAILU_POSTMASTER}
    #     - SECRET_KEY=${MAILU_SECRET_KEY}
    #     - AUTH_RATELIMIT=${MAILU_AUTH_RATELIMIT}
    #     - TLS_FLAVOR=${MAILU_TLS_FLAVOR}
    #     - DISABLE_STATISTICS=${MAILU_DISABLE_STATISTICS}
    #     - DMARC_RUA=${MAILU_DMARC_RUA}
    #     - DMARC_RUF=${MAILU_DMARC_RUF}
    #     - WELCOME=${MAILU_WELCOME}
    #     - WELCOME_SUBJECT=${MAILU_WELCOME_SUBJECT}
    #     - WELCOME_BODY=${MAILU_WELCOME_BODY}
    #     - WEB_ADMIN=${MAILU_WEB_ADMIN}
    #     - WEB_WEBMAIL=${MAILU_WEB_WEBMAIL}
    #     - WEBSITE=${MAILU_WEBSITE}
    #     - WEBMAIL=${MAILU_WEBMAIL}
    #     - SITENAME=${MAILU_SITENAME}
    #     - PASSWORD_SCHEME=${MAILU_PASSWORD_SCHEME}
    #     - RECAPTCHA_PUBLIC_KEY=${MAILU_RECAPTCHA_PUBLIC_KEY}
    #     - RECAPTCHA_PRIVATE_KEY=${MAILU_RECAPTCHA_PRIVATE_KEY}
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/data:/data"
    #     - "${DATA_PATH_HOST}/mailu/dkim:/dkim"
    #     - /var/run/docker.sock:/var/run/docker.sock:ro
    #   depends_on:
    #     - redis
    #   networks:
    #     backend:
    #       aliases:
    #         - admin
    # mailu-webmail:
    #   image: "mailu/${MAILU_WEBMAIL}:${MAILU_VERSION}"
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/webmail:/data"
    #   networks:
    #     backend:
    #       aliases:
    #         - webmail
    # mailu-fetchmail:
    #   image: mailu/fetchmail:${MAILU_VERSION}
    #   environment:
    #     - FETCHMAIL_DELAY=${MAILU_FETCHMAIL_DELAY}
    #   volumes:
    #     - "${DATA_PATH_HOST}/mailu/data:/data"
    #   networks:
    #     backend:
    #       aliases:
    #         - fetchmail


### GOLANG ######
    golang:                                # 自定义容器名称
      build:
        context: ./golang                  # 指定构建使用的 Dockerfile 文件
      environment:                         # 设置环境变量
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:                             # 设置挂载目录
        - ${GOLANG_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中
      ports:                               # 设置端口映射
        - "17001:17001"
        - "17002:17002"
        - "17003:17004"
      stdin_open: true                     # 打开标准输入，可以接受外部输入
      tty: true
      networks:
        - backend